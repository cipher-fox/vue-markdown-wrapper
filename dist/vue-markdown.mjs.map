{"version":3,"file":"vue-markdown.mjs","sources":["../node_modules/marked/lib/marked.esm.js","../node_modules/dompurify/dist/purify.es.mjs","../src/components/VueMarkdown.vue"],"sourcesContent":["/**\n * marked v13.0.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n')\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (/^ {0,3}>/.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                    .replace(/^ {0,3}>[ \\t]?/gm, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens[tokens.length - 1];\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n            list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i]\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i]\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(/^\\S*/)?.[0];\n        const code = text.replace(/\\n$/, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(langString)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' '\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${text}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body }]\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    let rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        if (!pack.useNewRenderer) {\n                            // TODO: Remove this in next major version\n                            rendererFunc = this.#convertRendererFunction(rendererFunc, rendererProp, renderer);\n                        }\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    // TODO: Remove this in next major release\n    #convertRendererFunction(func, prop, renderer) {\n        switch (prop) {\n            case 'heading':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, renderer.parser.parseInline(token.tokens), token.depth, unescape(renderer.parser.parseInline(token.tokens, renderer.parser.textRenderer)));\n                };\n            case 'code':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.lang, !!token.escaped);\n                };\n            case 'table':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < token.header.length; j++) {\n                        cell += this.tablecell({\n                            text: token.header[j].text,\n                            tokens: token.header[j].tokens,\n                            header: true,\n                            align: token.align[j]\n                        });\n                    }\n                    header += this.tablerow({ text: cell });\n                    let body = '';\n                    for (let j = 0; j < token.rows.length; j++) {\n                        const row = token.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.tablecell({\n                                text: row[k].text,\n                                tokens: row[k].tokens,\n                                header: false,\n                                align: token.align[k]\n                            });\n                        }\n                        body += this.tablerow({ text: cell });\n                    }\n                    return func.call(this, header, body);\n                };\n            case 'blockquote':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const body = this.parser.parse(token.tokens);\n                    return func.call(this, body);\n                };\n            case 'list':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const ordered = token.ordered;\n                    const start = token.start;\n                    const loose = token.loose;\n                    let body = '';\n                    for (let j = 0; j < token.items.length; j++) {\n                        const item = token.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.checkbox({ checked: !!checked });\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parser.parse(item.tokens, loose);\n                        body += this.listitem({\n                            type: 'list_item',\n                            raw: itemBody,\n                            text: itemBody,\n                            task,\n                            checked: !!checked,\n                            loose,\n                            tokens: item.tokens\n                        });\n                    }\n                    return func.call(this, body, ordered, start);\n                };\n            case 'html':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.block);\n                };\n            case 'paragraph':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'escape':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'link':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, this.parser.parseInline(token.tokens));\n                };\n            case 'image':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, token.text);\n                };\n            case 'strong':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'em':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'codespan':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'del':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'text':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            // do nothing\n        }\n        return func;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","/*! @license DOMPurify 3.1.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.1.6/LICENSE */\n\nconst {\n  entries,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor\n} = Object;\nlet {\n  freeze,\n  seal,\n  create\n} = Object; // eslint-disable-line import/no-mutable-exports\nlet {\n  apply,\n  construct\n} = typeof Reflect !== 'undefined' && Reflect;\nif (!freeze) {\n  freeze = function freeze(x) {\n    return x;\n  };\n}\nif (!seal) {\n  seal = function seal(x) {\n    return x;\n  };\n}\nif (!apply) {\n  apply = function apply(fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\nif (!construct) {\n  construct = function construct(Func, args) {\n    return new Func(...args);\n  };\n}\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringToString = unapply(String.prototype.toString);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\nconst objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);\nconst regExpTest = unapply(RegExp.prototype.test);\nconst typeErrorCreate = unconstruct(TypeError);\n\n/**\n * Creates a new function that calls the given function with a specified thisArg and arguments.\n *\n * @param {Function} func - The function to be wrapped and called.\n * @returns {Function} A new function that calls the given function with a specified thisArg and arguments.\n */\nfunction unapply(func) {\n  return function (thisArg) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return apply(func, thisArg, args);\n  };\n}\n\n/**\n * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n *\n * @param {Function} func - The constructor function to be wrapped and called.\n * @returns {Function} A new function that constructs an instance of the given constructor function with the provided arguments.\n */\nfunction unconstruct(func) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return construct(func, args);\n  };\n}\n\n/**\n * Add properties to a lookup table\n *\n * @param {Object} set - The set to which elements will be added.\n * @param {Array} array - The array containing elements to be added to the set.\n * @param {Function} transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n * @returns {Object} The modified set with added elements.\n */\nfunction addToSet(set, array) {\n  let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = transformCaseFunc(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n        element = lcElement;\n      }\n    }\n    set[element] = true;\n  }\n  return set;\n}\n\n/**\n * Clean up an array to harden against CSPP\n *\n * @param {Array} array - The array to be cleaned.\n * @returns {Array} The cleaned version of the array\n */\nfunction cleanArray(array) {\n  for (let index = 0; index < array.length; index++) {\n    const isPropertyExist = objectHasOwnProperty(array, index);\n    if (!isPropertyExist) {\n      array[index] = null;\n    }\n  }\n  return array;\n}\n\n/**\n * Shallow clone an object\n *\n * @param {Object} object - The object to be cloned.\n * @returns {Object} A new object that copies the original.\n */\nfunction clone(object) {\n  const newObject = create(null);\n  for (const [property, value] of entries(object)) {\n    const isPropertyExist = objectHasOwnProperty(object, property);\n    if (isPropertyExist) {\n      if (Array.isArray(value)) {\n        newObject[property] = cleanArray(value);\n      } else if (value && typeof value === 'object' && value.constructor === Object) {\n        newObject[property] = clone(value);\n      } else {\n        newObject[property] = value;\n      }\n    }\n  }\n  return newObject;\n}\n\n/**\n * This method automatically checks if the prop is function or getter and behaves accordingly.\n *\n * @param {Object} object - The object to look up the getter function in its prototype chain.\n * @param {String} prop - The property name for which to find the getter function.\n * @returns {Function} The getter function found in the prototype chain or a fallback function.\n */\nfunction lookupGetter(object, prop) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n    object = getPrototypeOf(object);\n  }\n  function fallbackValue() {\n    return null;\n  }\n  return fallbackValue;\n}\n\nconst html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);\n\n// SVG\nconst svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\nconst svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nconst svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\nconst mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);\n\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nconst mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\nconst text = freeze(['#text']);\n\nconst html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);\nconst svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\nconst mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\nconst xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n// eslint-disable-next-line unicorn/better-regex\nconst MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nconst ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nconst TMPLIT_EXPR = seal(/\\${[\\w\\W]*}/gm);\nconst DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\nconst ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nconst IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nconst IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nconst ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nconst DOCTYPE_NAME = seal(/^html$/i);\nconst CUSTOM_ELEMENT = seal(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\n\nvar EXPRESSIONS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MUSTACHE_EXPR: MUSTACHE_EXPR,\n  ERB_EXPR: ERB_EXPR,\n  TMPLIT_EXPR: TMPLIT_EXPR,\n  DATA_ATTR: DATA_ATTR,\n  ARIA_ATTR: ARIA_ATTR,\n  IS_ALLOWED_URI: IS_ALLOWED_URI,\n  IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n  ATTR_WHITESPACE: ATTR_WHITESPACE,\n  DOCTYPE_NAME: DOCTYPE_NAME,\n  CUSTOM_ELEMENT: CUSTOM_ELEMENT\n});\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\nconst NODE_TYPE = {\n  element: 1,\n  attribute: 2,\n  text: 3,\n  cdataSection: 4,\n  entityReference: 5,\n  // Deprecated\n  entityNode: 6,\n  // Deprecated\n  progressingInstruction: 7,\n  comment: 8,\n  document: 9,\n  documentType: 10,\n  documentFragment: 11,\n  notation: 12 // Deprecated\n};\nconst getGlobal = function getGlobal() {\n  return typeof window === 'undefined' ? null : window;\n};\n\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param {TrustedTypePolicyFactory} trustedTypes The policy factory.\n * @param {HTMLScriptElement} purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n * @return {TrustedTypePolicy} The policy created (or null, if Trusted Types\n * are not supported or creating the policy failed).\n */\nconst _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n  if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n    return null;\n  }\n\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n    suffix = purifyHostElement.getAttribute(ATTR_NAME);\n  }\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n      createScriptURL(scriptUrl) {\n        return scriptUrl;\n      }\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n    return null;\n  }\n};\nfunction createDOMPurify() {\n  let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n  const DOMPurify = root => createDOMPurify(root);\n\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n  DOMPurify.version = '3.1.6';\n\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n  DOMPurify.removed = [];\n  if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n    return DOMPurify;\n  }\n  let {\n    document\n  } = window;\n  const originalDocument = document;\n  const currentScript = originalDocument.currentScript;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n    HTMLFormElement,\n    DOMParser,\n    trustedTypes\n  } = window;\n  const ElementPrototype = Element.prototype;\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const remove = lookupGetter(ElementPrototype, 'remove');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n  let trustedTypesPolicy;\n  let emptyHTML = '';\n  const {\n    implementation,\n    createNodeIterator,\n    createDocumentFragment,\n    getElementsByTagName\n  } = document;\n  const {\n    importNode\n  } = originalDocument;\n  let hooks = {};\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    TMPLIT_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n    CUSTOM_ELEMENT\n  } = EXPRESSIONS;\n  let {\n    IS_ALLOWED_URI: IS_ALLOWED_URI$1\n  } = EXPRESSIONS;\n\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n\n  /*\n   * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {\n    tagNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    attributeNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    allowCustomizedBuiltInElements: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: false\n    }\n  }));\n\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n  let ALLOW_SELF_CLOSE_IN_ATTR = true;\n\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n\n  /* Output should be safe even for XML used within HTML and alike.\n   * This means, DOMPurify removes comments when containing risky content.\n   */\n  let SAFE_FOR_XML = true;\n\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n  let SANITIZE_DOM = true;\n\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (§7.3.3)\n   *   - DOM Tree Accessors (§3.1.5)\n   *   - Form Element Parent-Child Relations (§4.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n   *   - HTMLCollection (§4.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n  let SANITIZE_NAMED_PROPS = false;\n  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES = {};\n\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  let FORBID_CONTENTS = null;\n  const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n\n  /* Tags that are safe for data: URIs */\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n  let NAMESPACE = HTML_NAMESPACE;\n  let IS_EMPTY_INPUT = false;\n\n  /* Allowed XHTML+XML namespaces */\n  let ALLOWED_NAMESPACES = null;\n  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n\n  /* Parsing of strict XHTML documents */\n  let PARSER_MEDIA_TYPE = null;\n  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  let transformCaseFunc = null;\n\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG = null;\n\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n\n  const formElement = document.createElement('form');\n  const isRegexOrFunction = function isRegexOrFunction(testValue) {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n\n  /**\n   * _parseConfig\n   *\n   * @param  {Object} cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function _parseConfig() {\n    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n    PARSER_MEDIA_TYPE =\n    // eslint-disable-next-line unicorn/prefer-includes\n    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;\n\n    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n\n    /* Set configuration parameters */\n    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES),\n    // eslint-disable-line indent\n    cfg.ADD_URI_SAFE_ATTR,\n    // eslint-disable-line indent\n    transformCaseFunc // eslint-disable-line indent\n    ) // eslint-disable-line indent\n    : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS),\n    // eslint-disable-line indent\n    cfg.ADD_DATA_URI_TAGS,\n    // eslint-disable-line indent\n    transformCaseFunc // eslint-disable-line indent\n    ) // eslint-disable-line indent\n    : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, text);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, html$1);\n        addToSet(ALLOWED_ATTR, html);\n      }\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, svg$1);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, svgFilters);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, mathMl$1);\n        addToSet(ALLOWED_ATTR, mathMl);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n    }\n\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n    if (cfg.TRUSTED_TYPES_POLICY) {\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n      }\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n      }\n\n      // Overwrite existing TrustedTypes policy.\n      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;\n\n      // Sign local variables required by `sanitize`.\n      emptyHTML = trustedTypesPolicy.createHTML('');\n    } else {\n      // Uninitialized policy, attempt to initialize the internal dompurify policy.\n      if (trustedTypesPolicy === undefined) {\n        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n      }\n\n      // If creating the internal policy succeeded sign internal variables.\n      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      }\n    }\n\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n    CONFIG = cfg;\n  };\n  const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n  const HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'annotation-xml']);\n\n  // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);\n  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);\n\n  /**\n   * @param  {Element} element a DOM element whose namespace is being checked\n   * @returns {boolean} Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  const _checkValidNamespace = function _checkValidNamespace(element) {\n    let parent = getParentNode(element);\n\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template'\n      };\n    }\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n\n      // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n      }\n\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n    }\n\n    // For XHTML and XML documents that support custom namespaces\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return true;\n    }\n\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n    return false;\n  };\n\n  /**\n   * _forceRemove\n   *\n   * @param  {Node} node a DOM node\n   */\n  const _forceRemove = function _forceRemove(node) {\n    arrayPush(DOMPurify.removed, {\n      element: node\n    });\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      getParentNode(node).removeChild(node);\n    } catch (_) {\n      remove(node);\n    }\n  };\n\n  /**\n   * _removeAttribute\n   *\n   * @param  {String} name an Attribute name\n   * @param  {Node} node a DOM node\n   */\n  const _removeAttribute = function _removeAttribute(name, node) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: node.getAttributeNode(name),\n        from: node\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: node\n      });\n    }\n    node.removeAttribute(name);\n\n    // We void attribute values for unremovable \"is\"\" attributes\n    if (name === 'is' && !ALLOWED_ATTR[name]) {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(node);\n        } catch (_) {}\n      } else {\n        try {\n          node.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n\n  /**\n   * _initDocument\n   *\n   * @param  {String} dirty a string of dirty markup\n   * @return {Document} a DOM, filled with the dirty markup\n   */\n  const _initDocument = function _initDocument(dirty) {\n    /* Create a HTML document */\n    let doc = null;\n    let leadingWhitespace = null;\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n    }\n    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n      } catch (_) {\n        // Syntax error if dirtyPayload is invalid xml\n      }\n    }\n    const body = doc.body || doc.documentElement;\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n    }\n\n    /* Work on whole document or just its body */\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n    }\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n\n  /**\n   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n   *\n   * @param  {Node} root The root element or node to start traversing on.\n   * @return {NodeIterator} The created NodeIterator\n   */\n  const _createNodeIterator = function _createNodeIterator(root) {\n    return createNodeIterator.call(root.ownerDocument || root, root,\n    // eslint-disable-next-line no-bitwise\n    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);\n  };\n\n  /**\n   * _isClobbered\n   *\n   * @param  {Node} elm element to check for clobbering attacks\n   * @return {Boolean} true if clobbered, false if safe\n   */\n  const _isClobbered = function _isClobbered(elm) {\n    return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function' || typeof elm.hasChildNodes !== 'function');\n  };\n\n  /**\n   * Checks whether the given object is a DOM node.\n   *\n   * @param  {Node} object object to check whether it's a DOM node\n   * @return {Boolean} true is object is a DOM node\n   */\n  const _isNode = function _isNode(object) {\n    return typeof Node === 'function' && object instanceof Node;\n  };\n\n  /**\n   * _executeHook\n   * Execute user configurable hooks\n   *\n   * @param  {String} entryPoint  Name of the hook's entry point\n   * @param  {Node} currentNode node to work on with the hook\n   * @param  {Object} data additional hook parameters\n   */\n  const _executeHook = function _executeHook(entryPoint, currentNode, data) {\n    if (!hooks[entryPoint]) {\n      return;\n    }\n    arrayForEach(hooks[entryPoint], hook => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  };\n\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   *\n   * @param   {Node} currentNode to check for permission to exist\n   * @return  {Boolean} true if node was killed, false if left alive\n   */\n  const _sanitizeElements = function _sanitizeElements(currentNode) {\n    let content = null;\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeElements', currentNode, null);\n\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Now let's check the element's type and name */\n    const tagName = transformCaseFunc(currentNode.nodeName);\n\n    /* Execute a hook if present */\n    _executeHook('uponSanitizeElement', currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS\n    });\n\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove any occurrence of processing instructions */\n    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove any kind of possibly harmful comments */\n    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\\w]/g, currentNode.data)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {\n          return false;\n        }\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {\n          return false;\n        }\n      }\n\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n        if (childNodes && parentNode) {\n          const childCount = childNodes.length;\n          for (let i = childCount - 1; i >= 0; --i) {\n            const childClone = cloneNode(childNodes[i], true);\n            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;\n            parentNode.insertBefore(childClone, getNextSibling(currentNode));\n          }\n        }\n      }\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n        content = stringReplace(content, expr, ' ');\n      });\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, {\n          element: currentNode.cloneNode()\n        });\n        currentNode.textContent = content;\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeElements', currentNode, null);\n    return false;\n  };\n\n  /**\n   * _isValidAttribute\n   *\n   * @param  {string} lcTag Lowercase tag name of containing element.\n   * @param  {string} lcName Lowercase attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n      return false;\n    }\n\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if (\n      // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n      _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||\n      // Alternative, second condition checks if it's an `is`-attribute, AND\n      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n      return false;\n    } else ;\n    return true;\n  };\n\n  /**\n   * _isBasicCustomElement\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   *\n   * @param {string} tagName name of the tag of the node to sanitize\n   * @returns {boolean} Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n   */\n  const _isBasicCustomElement = function _isBasicCustomElement(tagName) {\n    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);\n  };\n\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param  {Node} currentNode to sanitize\n   */\n  const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeAttributes', currentNode, null);\n    const {\n      attributes\n    } = currentNode;\n\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes) {\n      return;\n    }\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR\n    };\n    let l = attributes.length;\n\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      const attr = attributes[l];\n      const {\n        name,\n        namespaceURI,\n        value: attrValue\n      } = attr;\n      const lcName = transformCaseFunc(name);\n      let value = name === 'value' ? attrValue : stringTrim(attrValue);\n\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n      value = hookEvent.attrValue;\n\n      /* Work around a security issue with comments inside attributes */\n      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\\/(style|title)/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n\n      /* Remove attribute */\n      _removeAttribute(name, currentNode);\n\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n\n      /* Work around a security issue in jQuery 3.0 */\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          value = stringReplace(value, expr, ' ');\n        });\n      }\n\n      /* Is `value` valid for this attribute? */\n      const lcTag = transformCaseFunc(currentNode.nodeName);\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode);\n\n        // Prefix the value and later re-create the attribute with the sanitized value\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n\n      /* Handle attributes that require Trusted Types */\n      if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n        if (namespaceURI) ; else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML':\n              {\n                value = trustedTypesPolicy.createHTML(value);\n                break;\n              }\n            case 'TrustedScriptURL':\n              {\n                value = trustedTypesPolicy.createScriptURL(value);\n                break;\n              }\n          }\n        }\n      }\n\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n        if (_isClobbered(currentNode)) {\n          _forceRemove(currentNode);\n        } else {\n          arrayPop(DOMPurify.removed);\n        }\n      } catch (_) {}\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeAttributes', currentNode, null);\n  };\n\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param  {DocumentFragment} fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n    let shadowNode = null;\n    const shadowIterator = _createNodeIterator(fragment);\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n    while (shadowNode = shadowIterator.nextNode()) {\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(shadowNode)) {\n        continue;\n      }\n\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(shadowNode);\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeShadowDOM', fragment, null);\n  };\n\n  /**\n   * Sanitize\n   * Public method providing core sanitation functionality\n   *\n   * @param {String|Node} dirty string or DOM node\n   * @param {Object} cfg object\n   */\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty) {\n    let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let body = null;\n    let importedNode = null;\n    let currentNode = null;\n    let returnNode = null;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    IS_EMPTY_INPUT = !dirty;\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n\n    /* Return dirty HTML if DOMPurify cannot run */\n    if (!DOMPurify.isSupported) {\n      return dirty;\n    }\n\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if (dirty.nodeName) {\n        const tagName = transformCaseFunc(dirty.nodeName);\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&\n      // eslint-disable-next-line unicorn/prefer-includes\n      dirty.indexOf('<') === -1) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      }\n\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n\n    /* Get node iterator */\n    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n\n    /* Now start iterating over the created document */\n    while (currentNode = nodeIterator.nextNode()) {\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(currentNode)) {\n        continue;\n      }\n\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(currentNode);\n    }\n\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n      return returnNode;\n    }\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n\n    /* Serialize doctype if allowed */\n    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n        serializedHTML = stringReplace(serializedHTML, expr, ' ');\n      });\n    }\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n  };\n\n  /**\n   * Public method to set the configuration once\n   * setConfig\n   *\n   * @param {Object} cfg configuration object\n   */\n  DOMPurify.setConfig = function () {\n    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n\n  /**\n   * Public method to remove the configuration\n   * clearConfig\n   *\n   */\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n\n  /**\n   * Public method to check if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   * isValidAttribute\n   *\n   * @param  {String} tag Tag name of containing element.\n   * @param  {String} attr Attribute name.\n   * @param  {String} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n   */\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n    const lcTag = transformCaseFunc(tag);\n    const lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n\n  /**\n   * AddHook\n   * Public method to add DOMPurify hooks\n   *\n   * @param {String} entryPoint entry point for the hook to add\n   * @param {Function} hookFunction function to execute\n   */\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n    hooks[entryPoint] = hooks[entryPoint] || [];\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n\n  /**\n   * RemoveHook\n   * Public method to remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if more are present)\n   *\n   * @param {String} entryPoint entry point for the hook to remove\n   * @return {Function} removed(popped) hook\n   */\n  DOMPurify.removeHook = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      return arrayPop(hooks[entryPoint]);\n    }\n  };\n\n  /**\n   * RemoveHooks\n   * Public method to remove all DOMPurify hooks at a given entryPoint\n   *\n   * @param  {String} entryPoint entry point for the hooks to remove\n   */\n  DOMPurify.removeHooks = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint] = [];\n    }\n  };\n\n  /**\n   * RemoveAllHooks\n   * Public method to remove all DOMPurify hooks\n   */\n  DOMPurify.removeAllHooks = function () {\n    hooks = {};\n  };\n  return DOMPurify;\n}\nvar purify = createDOMPurify();\n\nexport { purify as default };\n//# sourceMappingURL=purify.es.mjs.map\n","<script setup lang=\"ts\">\nimport { watch, ref, computed } from 'vue'\nimport { marked } from 'marked';\nimport DOMPurify from 'dompurify';\n\nexport interface Props {\n    md: string | null\n    silent?: boolean\n    breaks?: boolean\n    gfm?: boolean\n    pedantic?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    md: null,\n    silent: false,\n    breaks: false,\n    gfm: true,\n    pedantic: false\n})\n\nconst renderedMarkdown = ref('');\n\nconst computedMarkdown = computed(() => props.md)\n\nconst computedMarkedOptions = computed(() => {\n    return {\n        ...(typeof props.silent === 'boolean' ? { silent: props.silent } : { silent: false }),\n        ...(typeof props.breaks === 'boolean' ? { breaks: props.breaks } : { breaks: false }),\n        ...(typeof props.gfm === 'boolean' ? { gfm: props.gfm } : { gfm: true }),\n        ...(typeof props.pedantic === 'boolean' ? { pedantic: props.pedantic } : { pedantic: false }),\n    }\n})\n\nconst sanitize = (html: string) => DOMPurify.sanitize(html);\n\nwatch(computedMarkdown, async (newValue) => {\n    if (newValue) renderedMarkdown.value = sanitize(await marked.parse(newValue, { async: true, ...computedMarkedOptions.value }))\n})\n</script>\n\n<template>\n    <div v-if=\"renderedMarkdown\" v-html=\"renderedMarkdown\"></div>\n</template>"],"names":["_getDefaults","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","unescapeTest","unescape","_","n","caret","edit","regex","opt","source","obj","name","val","valSource","cleanUrl","href","noopTest","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","rtrim","c","invert","l","suffLen","currChar","findClosingBracket","b","level","i","outputLink","cap","link","raw","lexer","title","text","token","indentCodeCompensation","matchIndentToCode","indentToCode","node","matchIndentInNode","indentInNode","_Tokenizer","options","__publicField","src","trimmed","lines","tokens","inBlockquote","currentLines","currentRaw","currentText","top","lastToken","oldToken","newText","newToken","bull","isordered","list","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","nextLine","blankLine","indent","nextBulletRegex","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","spacers","hasMultipleLineBreaks","tag","headers","aligns","rows","item","align","cell","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastCharLength","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_a","newline","blockCode","fences","hr","heading","bullet","lheading","_paragraph","blockText","_blockLabel","def","_tag","_comment","paragraph","blockquote","blockNormal","gfmTable","blockGfm","blockPedantic","escape","inlineCode","br","inlineText","_punctuation","punctuation","blockSkip","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","_inlineLabel","reflink","nolink","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","block","inline","_Lexer","rules","next","lastParagraphClipped","leading","tabs","cutSrc","extTokenizer","startIndex","tempSrc","tempStart","getStartIndex","errMsg","keepPrevChar","_Renderer","lang","langString","code","depth","ordered","start","body","j","type","startAttr","itemBody","checkbox","checked","header","k","content","cleanHref","out","_TextRenderer","_Parser","anyToken","genericToken","ret","textToken","renderer","_Hooks","markdown","Marked","args","__privateAdd","_Marked_instances","__privateMethod","parseMarkdown_fn","callback","values","tableToken","listToken","_b","childTokens","extensions","pack","opts","ext","prevRenderer","extLevel","prop","rendererProp","rendererFunc","convertRendererFunction_fn","tokenizer","tokenizerProp","tokenizerFunc","prevTokenizer","hooks","hooksProp","hooksFunc","prevHook","arg","walkTokens","packWalktokens","func","loose","task","parser","origOpt","throwError","onError_fn","e","silent","async","msg","markedInstance","marked","entries","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","freeze","seal","create","apply","construct","x","fun","thisValue","Func","arrayForEach","unapply","arrayPop","arrayPush","stringToLowerCase","stringToString","stringMatch","stringReplace","stringIndexOf","stringTrim","objectHasOwnProperty","regExpTest","typeErrorCreate","unconstruct","thisArg","_len","_key","_len2","_key2","addToSet","set","array","transformCaseFunc","element","lcElement","cleanArray","index","clone","object","newObject","property","value","lookupGetter","desc","fallbackValue","html$1","svg$1","svgFilters","svgDisallowed","mathMl$1","mathMlDisallowed","svg","mathMl","xml","MUSTACHE_EXPR","ERB_EXPR","TMPLIT_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","DOCTYPE_NAME","CUSTOM_ELEMENT","EXPRESSIONS","NODE_TYPE","getGlobal","_createTrustedTypesPolicy","trustedTypes","purifyHostElement","suffix","ATTR_NAME","policyName","scriptUrl","createDOMPurify","window","DOMPurify","root","document","originalDocument","currentScript","DocumentFragment","HTMLTemplateElement","Node","Element","NodeFilter","NamedNodeMap","HTMLFormElement","DOMParser","ElementPrototype","cloneNode","remove","getNextSibling","getChildNodes","getParentNode","template","trustedTypesPolicy","emptyHTML","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","IS_ALLOWED_URI$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","ALLOW_SELF_CLOSE_IN_ATTR","SAFE_FOR_TEMPLATES","SAFE_FOR_XML","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","SANITIZE_NAMED_PROPS","SANITIZE_NAMED_PROPS_PREFIX","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","ALLOWED_NAMESPACES","DEFAULT_ALLOWED_NAMESPACES","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","DEFAULT_PARSER_MEDIA_TYPE","CONFIG","formElement","isRegexOrFunction","testValue","_parseConfig","cfg","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","COMMON_SVG_AND_HTML_ELEMENTS","ALL_SVG_TAGS","ALL_MATHML_TAGS","_checkValidNamespace","parent","tagName","parentTagName","_forceRemove","_removeAttribute","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","_createNodeIterator","_isClobbered","elm","_isNode","_executeHook","entryPoint","currentNode","data","hook","_sanitizeElements","_isBasicCustomElement","parentNode","childNodes","childCount","childClone","expr","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","attributes","hookEvent","attr","namespaceURI","attrValue","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","importedNode","returnNode","nodeIterator","serializedHTML","hookFunction","purify","props","__props","renderedMarkdown","ref","computedMarkdown","computed","computedMarkedOptions","sanitize","watch","newValue"],"mappings":"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","x_google_ignoreList":[0,1]}
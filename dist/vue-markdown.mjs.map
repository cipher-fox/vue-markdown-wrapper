{"version":3,"file":"vue-markdown.mjs","sources":["../node_modules/marked/lib/marked.esm.js","../node_modules/dompurify/dist/purify.es.js","../src/components/VueMarkdown.vue"],"sourcesContent":["/**\n * marked v7.0.4 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        baseUrl: null,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        headerIds: false,\n        headerPrefix: '',\n        highlight: null,\n        hooks: null,\n        langPrefix: 'language-',\n        mangle: false,\n        pedantic: false,\n        renderer: null,\n        sanitize: false,\n        sanitizer: null,\n        silent: false,\n        smartypants: false,\n        tokenizer: null,\n        walkTokens: null,\n        xhtml: false\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    regex = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            val = typeof val === 'object' && 'source' in val ? val.source : val;\n            val = val.replace(caret, '$1');\n            regex = regex.replace(name, val);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(regex, opt);\n        }\n    };\n    return obj;\n}\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n    if (sanitize) {\n        let prot;\n        try {\n            prot = decodeURIComponent(unescape(href))\n                .replace(nonWordAndColonTest, '')\n                .toLowerCase();\n        }\n        catch (e) {\n            return null;\n        }\n        if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n            return null;\n        }\n    }\n    if (base && !originIndependentUrl.test(href)) {\n        href = resolveUrl(base, href);\n    }\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\nfunction resolveUrl(base, href) {\n    if (!baseUrls[' ' + base]) {\n        // we can ignore everything in base after the last slash of its path component,\n        // but we might need to add _that_\n        // https://tools.ietf.org/html/rfc3986#section-3\n        if (justDomain.test(base)) {\n            baseUrls[' ' + base] = base + '/';\n        }\n        else {\n            baseUrls[' ' + base] = rtrim(base, '/', true);\n        }\n    }\n    base = baseUrls[' ' + base];\n    const relativeBase = base.indexOf(':') === -1;\n    if (href.substring(0, 2) === '//') {\n        if (relativeBase) {\n            return href;\n        }\n        return base.replace(protocol, '$1') + href;\n    }\n    else if (href.charAt(0) === '/') {\n        if (relativeBase) {\n            return href;\n        }\n        return base.replace(domain, '$1') + href;\n    }\n    else {\n        return base + href;\n    }\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\nfunction checkDeprecations(opt, callback) {\n    if (!opt || opt.silent) {\n        return;\n    }\n    if (callback) {\n        console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n    }\n    if (opt.sanitize || opt.sanitizer) {\n        console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n    }\n    if (opt.highlight || opt.langPrefix !== 'language-') {\n        console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n    }\n    if (opt.mangle) {\n        console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n    }\n    if (opt.baseUrl) {\n        console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n    }\n    if (opt.smartypants) {\n        console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n    }\n    if (opt.xhtml) {\n        console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n    }\n    if (opt.headerIds || opt.headerPrefix) {\n        console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n    }\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    // TODO: Fix this rules type\n    rules;\n    lexer;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimLeft();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimRight();\n            list.items[list.items.length - 1].text = itemContents.trimRight();\n            list.raw = list.raw.trimRight();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: !this.options.sanitizer\n                    && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n                text: cap[0]\n            };\n            if (this.options.sanitize) {\n                const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n                const paragraph = token;\n                paragraph.type = 'paragraph';\n                paragraph.text = text;\n                paragraph.tokens = this.lexer.inline(text);\n            }\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (cap) {\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: splitCells(cap[1]).map(c => {\n                    return { text: c, tokens: [] };\n                }),\n                align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n                rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n            };\n            if (item.header.length === item.align.length) {\n                let l = item.align.length;\n                let i, j, k, row;\n                for (i = 0; i < l; i++) {\n                    const align = item.align[i];\n                    if (align) {\n                        if (/^ *-+: *$/.test(align)) {\n                            item.align[i] = 'right';\n                        }\n                        else if (/^ *:-+: *$/.test(align)) {\n                            item.align[i] = 'center';\n                        }\n                        else if (/^ *:-+ *$/.test(align)) {\n                            item.align[i] = 'left';\n                        }\n                        else {\n                            item.align[i] = null;\n                        }\n                    }\n                }\n                l = item.rows.length;\n                for (i = 0; i < l; i++) {\n                    item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n                        return { text: c, tokens: [] };\n                    });\n                }\n                // parse child tokens inside headers and cells\n                // header child tokens\n                l = item.header.length;\n                for (j = 0; j < l; j++) {\n                    item.header[j].tokens = this.lexer.inline(item.header[j].text);\n                }\n                // cell child tokens\n                l = item.rows.length;\n                for (j = 0; j < l; j++) {\n                    row = item.rows[j];\n                    for (k = 0; k < row.length; k++) {\n                        row[k].tokens = this.lexer.inline(row[k].text);\n                    }\n                }\n                return item;\n            }\n        }\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: this.options.sanitize\n                    ? 'text'\n                    : 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: this.options.sanitize\n                    ? (this.options.sanitizer\n                        ? this.options.sanitizer(cap[0])\n                        : escape(cap[0]))\n                    : cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n                title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            link = links[link.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrong.lDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                const raw = [...src].slice(0, lLength + match.index + rLength + 1).join('');\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src, mangle) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src, mangle) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src, smartypants) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n            }\n            else {\n                text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst block = {\n    newline: /^(?: *(?:\\n|$))+/,\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n    hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n    html: '^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')',\n    def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n    table: noopTest,\n    lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n    .replace('label', block._label)\n    .replace('title', block._title)\n    .getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n    .replace('bull', block.bullet)\n    .getRegex();\nblock.list = edit(block.list)\n    .replace(/bull/g, block.bullet)\n    .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n    .replace('def', '\\\\n+(?=' + block.def.source + ')')\n    .getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n    .replace('comment', block._comment)\n    .replace('tag', block._tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nblock.lheading = edit(block.lheading)\n    .replace(/bull/g, block.bullet) // lists can interrupt\n    .getRegex();\nblock.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nblock.blockquote = edit(block.blockquote)\n    .replace('paragraph', block.paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nblock.normal = { ...block };\n/**\n * GFM Block Grammar\n */\nblock.gfm = {\n    ...block.normal,\n    table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n        + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\nblock.gfm.table = edit(block.gfm.table)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nblock.gfm.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('table', block.gfm.table) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nblock.pedantic = {\n    ...block.normal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', block._comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(block.normal._paragraph)\n        .replace('hr', block.hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', block.lheading)\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nconst inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest,\n    tag: '^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n    nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    emStrong: {\n        lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n        //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n        //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n        rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n        rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n    },\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^((?![*_])[\\spunctuation])/\n};\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._escapes = edit(inline._escapes, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n    .replace('scheme', inline._scheme)\n    .replace('email', inline._email)\n    .getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag)\n    .replace('comment', inline._comment)\n    .replace('attribute', inline._attribute)\n    .getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link)\n    .replace('label', inline._label)\n    .replace('href', inline._href)\n    .replace('title', inline._title)\n    .getRegex();\ninline.reflink = edit(inline.reflink)\n    .replace('label', inline._label)\n    .replace('ref', block._label)\n    .getRegex();\ninline.nolink = edit(inline.nolink)\n    .replace('ref', block._label)\n    .getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n    .replace('reflink', inline.reflink)\n    .replace('nolink', inline.nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\ninline.normal = { ...inline };\n/**\n * Pedantic Inline Grammar\n */\ninline.pedantic = {\n    ...inline.normal,\n    strong: {\n        start: /^__|\\*\\*/,\n        middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n        endAst: /\\*\\*(?!\\*)/g,\n        endUnd: /__(?!_)/g\n    },\n    em: {\n        start: /^_|\\*/,\n        middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n        endAst: /\\*(?!\\*)/g,\n        endUnd: /_(?!_)/g\n    },\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', inline._label)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', inline._label)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\ninline.gfm = {\n    ...inline.normal,\n    escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i')\n    .replace('email', inline.gfm._extended_email)\n    .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\ninline.breaks = {\n    ...inline.gfm,\n    br: edit(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline.gfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n    return text\n        // em-dashes\n        .replace(/---/g, '\\u2014')\n        // en-dashes\n        .replace(/--/g, '\\u2013')\n        // opening singles\n        .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n        // closing singles & apostrophes\n        .replace(/'/g, '\\u2019')\n        // opening doubles\n        .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n        // closing doubles\n        .replace(/\"/g, '\\u201d')\n        // ellipses\n        .replace(/\\.{3}/g, '\\u2026');\n}\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n    let out = '';\n    for (let i = 0; i < text.length; i++) {\n        const ch = Math.random() > 0.5\n            ? 'x' + text.charCodeAt(i).toString(16)\n            : text.charCodeAt(i).toString();\n        out += '&#' + ch + ';';\n    }\n    return out;\n}\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        // @ts-expect-error\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src, mangle)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        if (this.options.highlight) {\n            const out = this.options.highlight(code, lang);\n            if (out != null && out !== code) {\n                escaped = true;\n                code = out;\n            }\n        }\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"'\n            + this.options.langPrefix\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw, slugger) {\n        if (this.options.headerIds) {\n            const id = this.options.headerPrefix + slugger.slug(raw);\n            return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n        }\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\"'\n            + (this.options.xhtml ? ' /' : '')\n            + '> ';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return this.options.xhtml ? '<br/>' : '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += this.options.xhtml ? '/>' : '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Slugger generates header id\n */\nclass _Slugger {\n    seen;\n    constructor() {\n        this.seen = {};\n    }\n    serialize(value) {\n        return value\n            .toLowerCase()\n            .trim()\n            // remove html tags\n            .replace(/<[!\\/a-z].*?>/ig, '')\n            // remove unwanted chars\n            .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n            .replace(/\\s/g, '-');\n    }\n    /**\n     * Finds the next safe (unique) slug to use\n     */\n    getNextSafeSlug(originalSlug, isDryRun) {\n        let slug = originalSlug;\n        let occurenceAccumulator = 0;\n        if (this.seen.hasOwnProperty(slug)) {\n            occurenceAccumulator = this.seen[originalSlug];\n            do {\n                occurenceAccumulator++;\n                slug = originalSlug + '-' + occurenceAccumulator;\n            } while (this.seen.hasOwnProperty(slug));\n        }\n        if (!isDryRun) {\n            this.seen[originalSlug] = occurenceAccumulator;\n            this.seen[slug] = 0;\n        }\n        return slug;\n    }\n    /**\n     * Convert string to unique id\n     */\n    slug(value, options = {}) {\n        const slug = this.serialize(value);\n        return this.getNextSafeSlug(slug, options.dryrun);\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    slugger;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n        this.slugger = new _Slugger();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)), this.slugger);\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox;\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    parser = _Parser.parse;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    lexer = _Lexer.lex;\n    Tokenizer = _Tokenizer;\n    Slugger = _Slugger;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    const rendererFunc = pack.renderer[prop];\n                    const rendererKey = prop;\n                    const prevRenderer = renderer[rendererKey];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererKey] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    const tokenizerFunc = pack.tokenizer[prop];\n                    const tokenizerKey = prop;\n                    const prevTokenizer = tokenizer[tokenizerKey];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    tokenizer[tokenizerKey] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    const hooksFunc = pack.hooks[prop];\n                    const hooksKey = prop;\n                    const prevHook = hooks[hooksKey];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksKey] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksKey] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, optOrCallback, callback) => {\n            if (typeof optOrCallback === 'function') {\n                callback = optOrCallback;\n                optOrCallback = null;\n            }\n            const origOpt = { ...optOrCallback };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async, callback);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            checkDeprecations(opt, callback);\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (callback) {\n                const resultCallback = callback;\n                const highlight = opt.highlight;\n                let tokens;\n                try {\n                    if (opt.hooks) {\n                        src = opt.hooks.preprocess(src);\n                    }\n                    tokens = lexer(src, opt);\n                }\n                catch (e) {\n                    return throwError(e);\n                }\n                const done = (err) => {\n                    let out;\n                    if (!err) {\n                        try {\n                            if (opt.walkTokens) {\n                                this.walkTokens(tokens, opt.walkTokens);\n                            }\n                            out = parser(tokens, opt);\n                            if (opt.hooks) {\n                                out = opt.hooks.postprocess(out);\n                            }\n                        }\n                        catch (e) {\n                            err = e;\n                        }\n                    }\n                    opt.highlight = highlight;\n                    return err\n                        ? throwError(err)\n                        : resultCallback(null, out);\n                };\n                if (!highlight || highlight.length < 3) {\n                    return done();\n                }\n                delete opt.highlight;\n                if (!tokens.length)\n                    return done();\n                let pending = 0;\n                this.walkTokens(tokens, (token) => {\n                    if (token.type === 'code') {\n                        pending++;\n                        setTimeout(() => {\n                            highlight(token.text, token.lang, (err, code) => {\n                                if (err) {\n                                    return done(err);\n                                }\n                                if (code != null && code !== token.text) {\n                                    token.text = code;\n                                    token.escaped = true;\n                                }\n                                pending--;\n                                if (pending === 0) {\n                                    done();\n                                }\n                            });\n                        }, 0);\n                    }\n                });\n                if (pending === 0) {\n                    done();\n                }\n                return;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async, callback) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                if (callback) {\n                    callback(null, msg);\n                    return;\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            if (callback) {\n                callback(e);\n                return;\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt, callback) {\n    return markedInstance.parse(src, opt, callback);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _Slugger as Slugger, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","/*! @license DOMPurify 3.0.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.5/LICENSE */\n\nconst {\n  entries,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor\n} = Object;\nlet {\n  freeze,\n  seal,\n  create\n} = Object; // eslint-disable-line import/no-mutable-exports\n\nlet {\n  apply,\n  construct\n} = typeof Reflect !== 'undefined' && Reflect;\n\nif (!apply) {\n  apply = function apply(fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\n\nif (!freeze) {\n  freeze = function freeze(x) {\n    return x;\n  };\n}\n\nif (!seal) {\n  seal = function seal(x) {\n    return x;\n  };\n}\n\nif (!construct) {\n  construct = function construct(Func, args) {\n    return new Func(...args);\n  };\n}\n\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringToString = unapply(String.prototype.toString);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\nconst regExpTest = unapply(RegExp.prototype.test);\nconst typeErrorCreate = unconstruct(TypeError);\nfunction unapply(func) {\n  return function (thisArg) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return apply(func, thisArg, args);\n  };\n}\nfunction unconstruct(func) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return construct(func, args);\n  };\n}\n/* Add properties to a lookup table */\n\nfunction addToSet(set, array, transformCaseFunc) {\n  var _transformCaseFunc;\n\n  transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;\n\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n\n  let l = array.length;\n\n  while (l--) {\n    let element = array[l];\n\n    if (typeof element === 'string') {\n      const lcElement = transformCaseFunc(element);\n\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n\n        element = lcElement;\n      }\n    }\n\n    set[element] = true;\n  }\n\n  return set;\n}\n/* Shallow clone an object */\n\nfunction clone(object) {\n  const newObject = create(null);\n\n  for (const [property, value] of entries(object)) {\n    newObject[property] = value;\n  }\n\n  return newObject;\n}\n/* This method automatically checks if the prop is function\n * or getter and behaves accordingly. */\n\nfunction lookupGetter(object, prop) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n\n    object = getPrototypeOf(object);\n  }\n\n  function fallbackValue(element) {\n    console.warn('fallback value for', element);\n    return null;\n  }\n\n  return fallbackValue;\n}\n\nconst html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG\n\nconst svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\nconst svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\n\nconst svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\nconst mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']); // Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\n\nconst mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\nconst text = freeze(['#text']);\n\nconst html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);\nconst svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\nconst mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\nconst xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\nconst MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n\nconst ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\nconst TMPLIT_EXPR = seal(/\\${[\\w\\W]*}/gm);\nconst DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\n\nconst ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n\nconst IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nconst IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nconst ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\nconst DOCTYPE_NAME = seal(/^html$/i);\n\nvar EXPRESSIONS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MUSTACHE_EXPR: MUSTACHE_EXPR,\n  ERB_EXPR: ERB_EXPR,\n  TMPLIT_EXPR: TMPLIT_EXPR,\n  DATA_ATTR: DATA_ATTR,\n  ARIA_ATTR: ARIA_ATTR,\n  IS_ALLOWED_URI: IS_ALLOWED_URI,\n  IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n  ATTR_WHITESPACE: ATTR_WHITESPACE,\n  DOCTYPE_NAME: DOCTYPE_NAME\n});\n\nconst getGlobal = () => typeof window === 'undefined' ? null : window;\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n * @param {HTMLScriptElement} purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n * are not supported or creating the policy failed).\n */\n\n\nconst _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n  if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n    return null;\n  } // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n\n\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n\n  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n    suffix = purifyHostElement.getAttribute(ATTR_NAME);\n  }\n\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n\n      createScriptURL(scriptUrl) {\n        return scriptUrl;\n      }\n\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n    return null;\n  }\n};\n\nfunction createDOMPurify() {\n  let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n\n  const DOMPurify = root => createDOMPurify(root);\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n\n\n  DOMPurify.version = '3.0.5';\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n\n  DOMPurify.removed = [];\n\n  if (!window || !window.document || window.document.nodeType !== 9) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n    return DOMPurify;\n  }\n\n  const originalDocument = window.document;\n  const currentScript = originalDocument.currentScript;\n  let {\n    document\n  } = window;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n    HTMLFormElement,\n    DOMParser,\n    trustedTypes\n  } = window;\n  const ElementPrototype = Element.prototype;\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n\n  let trustedTypesPolicy;\n  let emptyHTML = '';\n  const {\n    implementation,\n    createNodeIterator,\n    createDocumentFragment,\n    getElementsByTagName\n  } = document;\n  const {\n    importNode\n  } = originalDocument;\n  let hooks = {};\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n\n  DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    TMPLIT_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE\n  } = EXPRESSIONS;\n  let {\n    IS_ALLOWED_URI: IS_ALLOWED_URI$1\n  } = EXPRESSIONS;\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n  /* Allowed attribute names */\n\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n  /*\n   * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\n   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n   */\n\n  let CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {\n    tagNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    attributeNameCheck: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: null\n    },\n    allowCustomizedBuiltInElements: {\n      writable: true,\n      configurable: false,\n      enumerable: true,\n      value: false\n    }\n  }));\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n\n  let FORBID_TAGS = null;\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n\n  let FORBID_ATTR = null;\n  /* Decide if ARIA attributes are okay */\n\n  let ALLOW_ARIA_ATTR = true;\n  /* Decide if custom data attributes are okay */\n\n  let ALLOW_DATA_ATTR = true;\n  /* Decide if unknown protocols are okay */\n\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n  /* Decide if self-closing tags in attributes are allowed.\n   * Usually removed due to a mXSS issue in jQuery 3.0 */\n\n  let ALLOW_SELF_CLOSE_IN_ATTR = true;\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n\n  let SAFE_FOR_TEMPLATES = false;\n  /* Decide if document with <html>... should be returned */\n\n  let WHOLE_DOCUMENT = false;\n  /* Track whether config is already set on this instance of DOMPurify. */\n\n  let SET_CONFIG = false;\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n\n  let FORCE_BODY = false;\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n\n  let RETURN_DOM = false;\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n\n  let RETURN_DOM_FRAGMENT = false;\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n\n  let RETURN_TRUSTED_TYPE = false;\n  /* Output should be free from DOM clobbering attacks?\n   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n   */\n\n  let SANITIZE_DOM = true;\n  /* Achieve full DOM Clobbering protection by isolating the namespace of named\n   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n   *\n   * HTML/DOM spec rules that enable DOM Clobbering:\n   *   - Named Access on Window (§7.3.3)\n   *   - DOM Tree Accessors (§3.1.5)\n   *   - Form Element Parent-Child Relations (§4.10.3)\n   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n   *   - HTMLCollection (§4.2.10.2)\n   *\n   * Namespace isolation is implemented by prefixing `id` and `name` attributes\n   * with a constant string, i.e., `user-content-`\n   */\n\n  let SANITIZE_NAMED_PROPS = false;\n  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n  /* Keep element content when removing element? */\n\n  let KEEP_CONTENT = true;\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n\n  let IN_PLACE = false;\n  /* Allow usage of profiles like html, svg and mathMl */\n\n  let USE_PROFILES = {};\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n\n  let FORBID_CONTENTS = null;\n  const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n  /* Tags that are safe for data: URIs */\n\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n  /* Attributes safe for values like \"javascript:\" */\n\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n  /* Document namespace */\n\n  let NAMESPACE = HTML_NAMESPACE;\n  let IS_EMPTY_INPUT = false;\n  /* Allowed XHTML+XML namespaces */\n\n  let ALLOWED_NAMESPACES = null;\n  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n  /* Parsing of strict XHTML documents */\n\n  let PARSER_MEDIA_TYPE;\n  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n  let transformCaseFunc;\n  /* Keep a reference to config to pass to hooks */\n\n  let CONFIG = null;\n  /* Ideally, do not touch anything below this line */\n\n  /* ______________________________________________ */\n\n  const formElement = document.createElement('form');\n\n  const isRegexOrFunction = function isRegexOrFunction(testValue) {\n    return testValue instanceof RegExp || testValue instanceof Function;\n  };\n  /**\n   * _parseConfig\n   *\n   * @param  {Object} cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n\n\n  const _parseConfig = function _parseConfig(cfg) {\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n    /* Shield configuration object from tampering */\n\n\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n    /* Shield configuration object from prototype pollution */\n\n\n    cfg = clone(cfg);\n    PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes\n    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n\n    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n    /* Set configuration parameters */\n\n    ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n    ALLOWED_NAMESPACES = 'ALLOWED_NAMESPACES' in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n    URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent\n    cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent\n    transformCaseFunc // eslint-disable-line indent\n    ) // eslint-disable-line indent\n    : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent\n    cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent\n    transformCaseFunc // eslint-disable-line indent\n    ) // eslint-disable-line indent\n    : DEFAULT_DATA_URI_TAGS;\n    FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n    FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n    FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n    USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n\n    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n\n    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n\n    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n    }\n\n    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n    }\n\n    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n    }\n\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n    /* Parse profile info */\n\n\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, [...text]);\n      ALLOWED_ATTR = [];\n\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, html$1);\n        addToSet(ALLOWED_ATTR, html);\n      }\n\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, svg$1);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, svgFilters);\n        addToSet(ALLOWED_ATTR, svg);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, mathMl$1);\n        addToSet(ALLOWED_ATTR, mathMl);\n        addToSet(ALLOWED_ATTR, xml);\n      }\n    }\n    /* Merge configuration parameters */\n\n\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n    }\n\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n    }\n\n    if (cfg.FORBID_CONTENTS) {\n      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n        FORBID_CONTENTS = clone(FORBID_CONTENTS);\n      }\n\n      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n    }\n    /* Add #text in case KEEP_CONTENT is set to true */\n\n\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n\n\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n\n\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n\n    if (cfg.TRUSTED_TYPES_POLICY) {\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n      }\n\n      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n      } // Overwrite existing TrustedTypes policy.\n\n\n      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY; // Sign local variables required by `sanitize`.\n\n      emptyHTML = trustedTypesPolicy.createHTML('');\n    } else {\n      // Uninitialized policy, attempt to initialize the internal dompurify policy.\n      if (trustedTypesPolicy === undefined) {\n        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n      } // If creating the internal policy succeeded sign internal variables.\n\n\n      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      }\n    } // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n\n\n    if (freeze) {\n      freeze(cfg);\n    }\n\n    CONFIG = cfg;\n  };\n\n  const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n  const HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML\n  // namespace. We need to specify them explicitly\n  // so that they don't get erroneously deleted from\n  // HTML namespace.\n\n  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n\n  const ALL_SVG_TAGS = addToSet({}, svg$1);\n  addToSet(ALL_SVG_TAGS, svgFilters);\n  addToSet(ALL_SVG_TAGS, svgDisallowed);\n  const ALL_MATHML_TAGS = addToSet({}, mathMl$1);\n  addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\n  /**\n   *\n   *\n   * @param  {Element} element a DOM element whose namespace is being checked\n   * @returns {boolean} Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n\n  const _checkValidNamespace = function _checkValidNamespace(element) {\n    let parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: NAMESPACE,\n        tagName: 'template'\n      };\n    }\n\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n\n    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return false;\n    }\n\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      } // The only way to switch from MathML to SVG is via`\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n\n\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n      } // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n\n\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      } // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n\n\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      } // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n\n\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      }\n\n      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n        return false;\n      } // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n\n\n      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n    } // For XHTML and XML documents that support custom namespaces\n\n\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n      return true;\n    } // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n    // Return false just in case.\n\n\n    return false;\n  };\n  /**\n   * _forceRemove\n   *\n   * @param  {Node} node a DOM node\n   */\n\n\n  const _forceRemove = function _forceRemove(node) {\n    arrayPush(DOMPurify.removed, {\n      element: node\n    });\n\n    try {\n      // eslint-disable-next-line unicorn/prefer-dom-node-remove\n      node.parentNode.removeChild(node);\n    } catch (_) {\n      node.remove();\n    }\n  };\n  /**\n   * _removeAttribute\n   *\n   * @param  {String} name an Attribute name\n   * @param  {Node} node a DOM node\n   */\n\n\n  const _removeAttribute = function _removeAttribute(name, node) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: node.getAttributeNode(name),\n        from: node\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: node\n      });\n    }\n\n    node.removeAttribute(name); // We void attribute values for unremovable \"is\"\" attributes\n\n    if (name === 'is' && !ALLOWED_ATTR[name]) {\n      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n        try {\n          _forceRemove(node);\n        } catch (_) {}\n      } else {\n        try {\n          node.setAttribute(name, '');\n        } catch (_) {}\n      }\n    }\n  };\n  /**\n   * _initDocument\n   *\n   * @param  {String} dirty a string of dirty markup\n   * @return {Document} a DOM, filled with the dirty markup\n   */\n\n\n  const _initDocument = function _initDocument(dirty) {\n    /* Create a HTML document */\n    let doc;\n    let leadingWhitespace;\n\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n\n    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n      dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n    }\n\n    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n    /*\n     * Use the DOMParser API by default, fallback later if needs be\n     * DOMParser not work for svg when has multiple root element.\n     */\n\n    if (NAMESPACE === HTML_NAMESPACE) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n      } catch (_) {}\n    }\n    /* Use createHTMLDocument in case DOMParser is not available */\n\n\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createDocument(NAMESPACE, 'template', null);\n\n      try {\n        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n      } catch (_) {// Syntax error if dirtyPayload is invalid xml\n      }\n    }\n\n    const body = doc.body || doc.documentElement;\n\n    if (dirty && leadingWhitespace) {\n      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n    }\n    /* Work on whole document or just its body */\n\n\n    if (NAMESPACE === HTML_NAMESPACE) {\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n    }\n\n    return WHOLE_DOCUMENT ? doc.documentElement : body;\n  };\n  /**\n   * _createIterator\n   *\n   * @param  {Document} root document/fragment to create iterator for\n   * @return {Iterator} iterator instance\n   */\n\n\n  const _createIterator = function _createIterator(root) {\n    return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise\n    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);\n  };\n  /**\n   * _isClobbered\n   *\n   * @param  {Node} elm element to check for clobbering attacks\n   * @return {Boolean} true if clobbered, false if safe\n   */\n\n\n  const _isClobbered = function _isClobbered(elm) {\n    return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function' || typeof elm.hasChildNodes !== 'function');\n  };\n  /**\n   * _isNode\n   *\n   * @param  {Node} obj object to check whether it's a DOM node\n   * @return {Boolean} true is object is a DOM node\n   */\n\n\n  const _isNode = function _isNode(object) {\n    return typeof Node === 'object' ? object instanceof Node : object && typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';\n  };\n  /**\n   * _executeHook\n   * Execute user configurable hooks\n   *\n   * @param  {String} entryPoint  Name of the hook's entry point\n   * @param  {Node} currentNode node to work on with the hook\n   * @param  {Object} data additional hook parameters\n   */\n\n\n  const _executeHook = function _executeHook(entryPoint, currentNode, data) {\n    if (!hooks[entryPoint]) {\n      return;\n    }\n\n    arrayForEach(hooks[entryPoint], hook => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  };\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   *\n   * @param   {Node} currentNode to check for permission to exist\n   * @return  {Boolean} true if node was killed, false if left alive\n   */\n\n\n  const _sanitizeElements = function _sanitizeElements(currentNode) {\n    let content;\n    /* Execute a hook if present */\n\n    _executeHook('beforeSanitizeElements', currentNode, null);\n    /* Check if element is clobbered or can clobber */\n\n\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n\n      return true;\n    }\n    /* Now let's check the element's type and name */\n\n\n    const tagName = transformCaseFunc(currentNode.nodeName);\n    /* Execute a hook if present */\n\n    _executeHook('uponSanitizeElement', currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS\n    });\n    /* Detect mXSS attempts abusing namespace confusion */\n\n\n    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n      _forceRemove(currentNode);\n\n      return true;\n    }\n    /* Remove element if anything forbids its presence */\n\n\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Check if we have a custom element to handle */\n      if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;\n        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;\n      }\n      /* Keep content except for bad-listed elements */\n\n\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n\n        if (childNodes && parentNode) {\n          const childCount = childNodes.length;\n\n          for (let i = childCount - 1; i >= 0; --i) {\n            parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));\n          }\n        }\n      }\n\n      _forceRemove(currentNode);\n\n      return true;\n    }\n    /* Check whether element has a valid namespace */\n\n\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n\n      return true;\n    }\n    /* Make sure that older browsers don't get fallback-tag mXSS */\n\n\n    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n      _forceRemove(currentNode);\n\n      return true;\n    }\n    /* Sanitize element content to be template-safe */\n\n\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      content = stringReplace(content, MUSTACHE_EXPR, ' ');\n      content = stringReplace(content, ERB_EXPR, ' ');\n      content = stringReplace(content, TMPLIT_EXPR, ' ');\n\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, {\n          element: currentNode.cloneNode()\n        });\n        currentNode.textContent = content;\n      }\n    }\n    /* Execute a hook if present */\n\n\n    _executeHook('afterSanitizeElements', currentNode, null);\n\n    return false;\n  };\n  /**\n   * _isValidAttribute\n   *\n   * @param  {string} lcTag Lowercase tag name of containing element.\n   * @param  {string} lcName Lowercase attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n\n\n  const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n      return false;\n    }\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n\n\n    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n      _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND\n      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n        return false;\n      }\n      /* Check value is safe. First, is attr inert? If so, is safe */\n\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n      return false;\n    } else ;\n\n    return true;\n  };\n  /**\n   * _basicCustomElementCheck\n   * checks if at least one dash is included in tagName, and it's not the first char\n   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n   * @param {string} tagName name of the tag of the node to sanitize\n   */\n\n\n  const _basicCustomElementTest = function _basicCustomElementTest(tagName) {\n    return tagName.indexOf('-') > 0;\n  };\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param  {Node} currentNode to sanitize\n   */\n\n\n  const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n    let attr;\n    let value;\n    let lcName;\n    let l;\n    /* Execute a hook if present */\n\n    _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n    const {\n      attributes\n    } = currentNode;\n    /* Check if we have attributes; if not we might have a text node */\n\n    if (!attributes) {\n      return;\n    }\n\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR\n    };\n    l = attributes.length;\n    /* Go backwards over all attributes; safely remove bad ones */\n\n    while (l--) {\n      attr = attributes[l];\n      const {\n        name,\n        namespaceURI\n      } = attr;\n      value = name === 'value' ? attr.value : stringTrim(attr.value);\n      lcName = transformCaseFunc(name);\n      /* Execute a hook if present */\n\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n\n      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n\n      value = hookEvent.attrValue;\n      /* Did the hooks approve of the attribute? */\n\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n      /* Remove attribute */\n\n\n      _removeAttribute(name, currentNode);\n      /* Did the hooks approve of the attribute? */\n\n\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n      /* Work around a security issue in jQuery 3.0 */\n\n\n      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n\n        continue;\n      }\n      /* Sanitize attribute content to be template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES) {\n        value = stringReplace(value, MUSTACHE_EXPR, ' ');\n        value = stringReplace(value, ERB_EXPR, ' ');\n        value = stringReplace(value, TMPLIT_EXPR, ' ');\n      }\n      /* Is `value` valid for this attribute? */\n\n\n      const lcTag = transformCaseFunc(currentNode.nodeName);\n\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n      /* Full DOM Clobbering protection via namespace isolation,\n       * Prefix id and name attributes with `user-content-`\n       */\n\n\n      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n        // Remove the attribute with this value\n        _removeAttribute(name, currentNode); // Prefix the value and later re-create the attribute with the sanitized value\n\n\n        value = SANITIZE_NAMED_PROPS_PREFIX + value;\n      }\n      /* Handle attributes that require Trusted Types */\n\n\n      if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n        if (namespaceURI) ; else {\n          switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n            case 'TrustedHTML':\n              {\n                value = trustedTypesPolicy.createHTML(value);\n                break;\n              }\n\n            case 'TrustedScriptURL':\n              {\n                value = trustedTypesPolicy.createScriptURL(value);\n                break;\n              }\n          }\n        }\n      }\n      /* Handle invalid data-* attribute set by try-catching it */\n\n\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n\n        arrayPop(DOMPurify.removed);\n      } catch (_) {}\n    }\n    /* Execute a hook if present */\n\n\n    _executeHook('afterSanitizeAttributes', currentNode, null);\n  };\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param  {DocumentFragment} fragment to iterate over recursively\n   */\n\n\n  const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n    let shadowNode;\n\n    const shadowIterator = _createIterator(fragment);\n    /* Execute a hook if present */\n\n\n    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n    while (shadowNode = shadowIterator.nextNode()) {\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n      /* Sanitize tags and elements */\n\n\n      if (_sanitizeElements(shadowNode)) {\n        continue;\n      }\n      /* Deep shadow DOM detected */\n\n\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n      /* Check attributes, sanitize if necessary */\n\n\n      _sanitizeAttributes(shadowNode);\n    }\n    /* Execute a hook if present */\n\n\n    _executeHook('afterSanitizeShadowDOM', fragment, null);\n  };\n  /**\n   * Sanitize\n   * Public method providing core sanitation functionality\n   *\n   * @param {String|Node} dirty string or DOM node\n   * @param {Object} configuration object\n   */\n  // eslint-disable-next-line complexity\n\n\n  DOMPurify.sanitize = function (dirty) {\n    let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let body;\n    let importedNode;\n    let currentNode;\n    let returnNode;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n\n    IS_EMPTY_INPUT = !dirty;\n\n    if (IS_EMPTY_INPUT) {\n      dirty = '<!-->';\n    }\n    /* Stringify, in case dirty is an object */\n\n\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString === 'function') {\n        dirty = dirty.toString();\n\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      } else {\n        throw typeErrorCreate('toString is not a function');\n      }\n    }\n    /* Return dirty HTML if DOMPurify cannot run */\n\n\n    if (!DOMPurify.isSupported) {\n      return dirty;\n    }\n    /* Assign config vars */\n\n\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n    /* Clean up removed elements */\n\n\n    DOMPurify.removed = [];\n    /* Check if dirty is correctly typed for IN_PLACE */\n\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n\n    if (IN_PLACE) {\n      /* Do some early pre-sanitization to avoid unsafe root nodes */\n      if (dirty.nodeName) {\n        const tagName = transformCaseFunc(dirty.nodeName);\n\n        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n        }\n      }\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n\n      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-dom-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes\n      dirty.indexOf('<') === -1) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      }\n      /* Initialize the document to work on */\n\n\n      body = _initDocument(dirty);\n      /* Check we have a DOM node from the data */\n\n      if (!body) {\n        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n      }\n    }\n    /* Remove first element node (ours) if FORCE_BODY is set */\n\n\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n    /* Get node iterator */\n\n\n    const nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n    /* Now start iterating over the created document */\n\n\n    while (currentNode = nodeIterator.nextNode()) {\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(currentNode)) {\n        continue;\n      }\n      /* Shadow DOM detected, sanitize it */\n\n\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n      /* Check attributes, sanitize if necessary */\n\n\n      _sanitizeAttributes(currentNode);\n    }\n    /* If we sanitized `dirty` in-place, return it. */\n\n\n    if (IN_PLACE) {\n      return dirty;\n    }\n    /* Return sanitized string or DOM */\n\n\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n\n      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n\n      return returnNode;\n    }\n\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n    /* Serialize doctype if allowed */\n\n    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n    }\n    /* Sanitize final string template-safe */\n\n\n    if (SAFE_FOR_TEMPLATES) {\n      serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR, ' ');\n      serializedHTML = stringReplace(serializedHTML, ERB_EXPR, ' ');\n      serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR, ' ');\n    }\n\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n  };\n  /**\n   * Public method to set the configuration once\n   * setConfig\n   *\n   * @param {Object} cfg configuration object\n   */\n\n\n  DOMPurify.setConfig = function (cfg) {\n    _parseConfig(cfg);\n\n    SET_CONFIG = true;\n  };\n  /**\n   * Public method to remove the configuration\n   * clearConfig\n   *\n   */\n\n\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n  /**\n   * Public method to check if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   * isValidAttribute\n   *\n   * @param  {string} tag Tag name of containing element.\n   * @param  {string} attr Attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n   */\n\n\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n\n    const lcTag = transformCaseFunc(tag);\n    const lcName = transformCaseFunc(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n  /**\n   * AddHook\n   * Public method to add DOMPurify hooks\n   *\n   * @param {String} entryPoint entry point for the hook to add\n   * @param {Function} hookFunction function to execute\n   */\n\n\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n\n    hooks[entryPoint] = hooks[entryPoint] || [];\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n  /**\n   * RemoveHook\n   * Public method to remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if more are present)\n   *\n   * @param {String} entryPoint entry point for the hook to remove\n   * @return {Function} removed(popped) hook\n   */\n\n\n  DOMPurify.removeHook = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      return arrayPop(hooks[entryPoint]);\n    }\n  };\n  /**\n   * RemoveHooks\n   * Public method to remove all DOMPurify hooks at a given entryPoint\n   *\n   * @param  {String} entryPoint entry point for the hooks to remove\n   */\n\n\n  DOMPurify.removeHooks = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint] = [];\n    }\n  };\n  /**\n   * RemoveAllHooks\n   * Public method to remove all DOMPurify hooks\n   *\n   */\n\n\n  DOMPurify.removeAllHooks = function () {\n    hooks = {};\n  };\n\n  return DOMPurify;\n}\n\nvar purify = createDOMPurify();\n\nexport { purify as default };\n//# sourceMappingURL=purify.es.js.map\n","<script setup lang=\"ts\">\nimport { watch, ref, computed } from 'vue'\nimport { marked } from 'marked';\nimport DOMPurify from 'dompurify';\n\nexport interface Props {\n    md: string | null\n    silent?: boolean\n    breaks?: boolean\n    gfm?: boolean\n    pedantic?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    md: null,\n    silent: false,\n    breaks: false,\n    gfm: true,\n    pedantic: false\n})\n\nconst renderedMarkdown = ref('');\n\nconst computedMarkdown = computed(() => props.md)\n\nconst computedMarkedOptions = computed(() => {\n    return {\n        ...(typeof props.silent === 'boolean' ? { silent: props.silent } : { silent: false }),\n        ...(typeof props.breaks === 'boolean' ? { breaks: props.breaks } : { breaks: false }),\n        ...(typeof props.gfm === 'boolean' ? { gfm: props.gfm } : { gfm: true }),\n        ...(typeof props.pedantic === 'boolean' ? { pedantic: props.pedantic } : { pedantic: false }),\n    }\n})\n\nconst sanitize = (html: string) => DOMPurify.sanitize(html);\n\nwatch(computedMarkdown, async (newValue) => {\n    if (newValue) renderedMarkdown.value = sanitize(await marked.parse(newValue, { async: true, ...computedMarkedOptions.value }))\n})\n</script>\n\n<template>\n    <div v-if=\"renderedMarkdown\" v-html=\"renderedMarkdown\"></div>\n</template>"],"names":["_getDefaults","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","unescapeTest","unescape","_","caret","edit","regex","opt","obj","name","val","nonWordAndColonTest","originIndependentUrl","cleanUrl","sanitize","base","href","prot","resolveUrl","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","c","invert","l","suffLen","currChar","findClosingBracket","b","level","i","checkDeprecations","callback","outputLink","cap","link","raw","lexer","title","text","token","indentCodeCompensation","matchIndentToCode","indentToCode","node","matchIndentInNode","indentInNode","_Tokenizer","options","__publicField","src","trimmed","top","tokens","bull","isordered","list","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","nextLine","indent","blankLine","nextBulletRegex","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","spacers","hasMultipleLineBreaks","paragraph","tag","item","j","k","align","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","hasNonSpaceChars","hasSpaceCharsOnBothEnds","mangle","prevCapZero","smartypants","block","inline","out","_Lexer","rules","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","startIndex","tempSrc","tempStart","getStartIndex","errMsg","keepPrevChar","_Renderer","code","infostring","lang","_a","quote","slugger","id","body","ordered","start","type","startatt","task","checked","header","content","flags","cleanHref","_TextRenderer","_Slugger","value","originalSlug","isDryRun","slug","occurenceAccumulator","_Parser","genericToken","ret","headingToken","codeToken","tableToken","cell","blockquoteToken","listToken","loose","itemBody","checkbox","htmlToken","paragraphToken","textToken","renderer","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","markdown","Marked","args","__privateAdd","_parseMarkdown","_onError","__privateMethod","parseMarkdown_fn","values","_b","childTokens","extensions","pack","opts","ext","prevRenderer","extLevel","prop","rendererFunc","rendererKey","tokenizer","tokenizerFunc","tokenizerKey","prevTokenizer","hooks","hooksFunc","hooksKey","prevHook","arg","walkTokens","packWalktokens","parser","optOrCallback","origOpt","throwError","onError_fn","resultCallback","highlight","e","done","err","pending","silent","async","msg","markedInstance","marked","entries","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","freeze","seal","create","apply","construct","fun","thisValue","x","Func","arrayForEach","unapply","arrayPop","arrayPush","stringToLowerCase","stringToString","stringMatch","stringReplace","stringIndexOf","stringTrim","regExpTest","typeErrorCreate","unconstruct","func","thisArg","_len","_key","_len2","_key2","addToSet","set","array","transformCaseFunc","_transformCaseFunc","element","lcElement","clone","object","newObject","property","lookupGetter","desc","fallbackValue","html$1","svg$1","svgFilters","svgDisallowed","mathMl$1","mathMlDisallowed","svg","mathMl","xml","MUSTACHE_EXPR","ERB_EXPR","TMPLIT_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","DOCTYPE_NAME","EXPRESSIONS","getGlobal","_createTrustedTypesPolicy","trustedTypes","purifyHostElement","suffix","ATTR_NAME","policyName","scriptUrl","createDOMPurify","window","DOMPurify","root","originalDocument","currentScript","document","DocumentFragment","HTMLTemplateElement","Node","Element","NodeFilter","NamedNodeMap","HTMLFormElement","DOMParser","ElementPrototype","cloneNode","getNextSibling","getChildNodes","getParentNode","template","trustedTypesPolicy","emptyHTML","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","IS_ALLOWED_URI$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","ALLOW_SELF_CLOSE_IN_ATTR","SAFE_FOR_TEMPLATES","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","SANITIZE_NAMED_PROPS","SANITIZE_NAMED_PROPS_PREFIX","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","ALLOWED_NAMESPACES","DEFAULT_ALLOWED_NAMESPACES","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","DEFAULT_PARSER_MEDIA_TYPE","CONFIG","formElement","isRegexOrFunction","testValue","_parseConfig","cfg","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","COMMON_SVG_AND_HTML_ELEMENTS","ALL_SVG_TAGS","ALL_MATHML_TAGS","_checkValidNamespace","parent","tagName","parentTagName","_forceRemove","_removeAttribute","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","_createIterator","_isClobbered","elm","_isNode","_executeHook","entryPoint","currentNode","data","hook","_sanitizeElements","_basicCustomElementTest","parentNode","childNodes","childCount","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","attr","attributes","hookEvent","namespaceURI","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","importedNode","returnNode","nodeIterator","serializedHTML","hookFunction","purify","renderedMarkdown","ref","computedMarkdown","computed","props","computedMarkedOptions","watch","newValue"],"mappings":"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","x_google_ignoreList":[0,1]}